{"version":3,"sources":["components/InputForm.js","App.js","index.js"],"names":["InputForm","letter","map","inputTitle","type","name","id","className","style","width","onChange","e","target","value","charAt","toUpperCase","alert","validateFirstLetter","disabled","App","useState","startTimer","setStartTimer","currentGameLetter","setCurrentGameLetter","scores","setScores","alphabetsArr","split","inputFieldsArray","calculateScores","inputField","document","querySelector","forEach","userInput","fetch","then","res","json","Object","keys","indexOf","parseInt","prevScore","startGame","alphabet","inputFieldTitle","getElementById","removeAttribute","enableInputFields","endGame","Row","position","top","Col","sm","height","padding","background","color","renderer","hours","minutes","seconds","completed","toString","length","date","Date","now","border","Button","variant","onClick","Table","striped","bordered","hover","size","marginTop","ReactDOM","render"],"mappings":"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","file":"static/js/main.8ba33f84.chunk.js","sourcesContent":["import React from \"react\";\n\nconst InputForm = ({ letter }) => {\n\nconst inputTitles = [\"name\", \"animal\", \"place\", \"thing\"];\n\n  const validateFirstLetter = (e) => {\n    const userInput = e.target.value;\n    if (userInput.charAt(0).toUpperCase() !== letter) {\n      alert(`Word must begin with ${letter}`);\n      e.target.value = \"\";\n    }\n  };\n\n  return (\n    <>\n      {inputTitles.map((inputTitle) => (\n        <td>\n          <input\n            type=\"text\"\n            name={`${letter}-${inputTitle}`}\n            id={`${letter}-${inputTitle}`}\n \t    className=\"form-control\"\n     \t    style={{width:'20vw'}}\n            onChange={(e) => {validateFirstLetter(e);}}\n            disabled\n          />\n        </td>\n      ))}\n    </>\n  );\n};\n\nexport default InputForm;\n","import \"./bootstrap.min.css\";\nimport \"./App.css\";\nimport { useState } from \"react\";\n\nimport Countdown from \"react-countdown\";\n\nimport { Table, Button, Row, Col } from \"react-bootstrap\";\nimport InputForm from \"./components/InputForm\";\n\nfunction App() {\n  const wordsApiUrl = \"https://api.dictionaryapi.dev/api/v2/entries/en/\";\n\n  const [startTimer, setStartTimer] = useState(false);\n\n  const [currentGameLetter, setCurrentGameLetter] = useState(\"\");\n\n  const [scores, setScores] = useState(0);\n\n  const alphabetsArr = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\".split(\"\");\n\n  const inputFieldsArray = [\"name\", \"animal\", \"place\", \"thing\"];\n\n  const getUserInputs = ()=>{ return inputFieldsArray.map(inputField=>{\n      return document.querySelector(`#${currentGameLetter}-${inputField}`).value;\n    })};\n\n\n  const calculateScores = ()=>{ \n    const userInputs = getUserInputs();\n\n    userInputs.forEach( userInput => {\n      fetch(wordsApiUrl + userInput)\n      .then(res=>res.json())\n      .then((res)=>{\n        if(Object.keys(res).indexOf(\"title\") === 0){return;}\n  \tif(parseInt(Object.keys(res[0]).indexOf(\"word\")) === 0 ){ setScores(prevScore => prevScore + 1) }\n      });\n    })\n  };\n\n  const enableInputFields = (alphabet) => {\n    inputFieldsArray.forEach((inputFieldTitle) =>\n      document\n        .getElementById(`${alphabet}-${inputFieldTitle}`)\n        .removeAttribute(\"disabled\")\n    );\n  };\n\n  const disableInputFields = () => {\n    inputFieldsArray.forEach(\n      (inputFieldTitle) =>\n        (document.getElementById(\n          `${currentGameLetter}-${inputFieldTitle}`\n        ).disabled = true)\n    );\n  };\n\n  const disableGameButton = (button) => {\n    button.disabled = true;\n  };\n\n  const startGame = (e, alphabet) => {\n    disableGameButton(e.target);\n    //Start timer\n    setStartTimer(true);\n\n    setCurrentGameLetter(alphabet);\n\n    //Enable all input fields\n    enableInputFields(alphabet);\n  };\n\n  const endGame = () => {\n    //resetTimer\n    //disable input fields\n    disableInputFields();\n    setStartTimer(false);\n    setCurrentGameLetter(\"\");\n    //calculate scores\n    calculateScores();\n  };\n\n  const renderer = ({ hours, minutes, seconds, completed }) => {\n    if (completed) {\n      //End current game\n      endGame();\n      return (\n        <span>\n          {hours}:{minutes}:{seconds}\n        </span>\n      );\n    } else {\n      // Render a countdown\n      return (\n        <span>\n          0{hours}:0{minutes}:{seconds.toString().length === 1 ? `0${seconds}` : seconds}\n        </span>\n      );\n    }\n  };\n\n  return (\n    <div className=\"App container\">\n            <Row style={{position:\"fixed\", top:\"10px\"}} className=\"mb-5 align-items-center\">\n <Col sm={4} className=\"ml-2\" style={{height:\"2rem\", padding:\"0.5rem\", background:\"rgba(0,0,0,0.4)\",color:\"white\"}}>\n              {startTimer ? (\n                <Countdown renderer={renderer} date={Date.now() + 30000} />\n              ) : (\n                \"00:00:30\"\n              )}\n</Col>\n<Col sm={4} className=\"ml-2\">\n              <div className=\"d-flex align-items-center justify-content-center\" style={{border:\"2px solid black\", height:\"2rem\", width:\"8rem\"}}>Scores: {scores}</div>\n</Col>\n<Col sm={3} className=\"ml-2\">\n              <Button\n                variant=\"info\"\n                onClick={() => {\n                  endGame();\n                }}\n              >\n                Submit\n              </Button>\n\n</Col>\n            </Row>\n      <Row>\n      <Table striped bordered hover size=\"sm\" style={{marginTop:\"4rem\"}}>\n        <thead>\n          <tr>\n            <th>Letters</th>\n            <th>Name</th>\n            <th>Animal</th>\n            <th>Place</th>\n            <th>Thing</th>\n          </tr>\n        </thead>\n        <tbody>\n          {alphabetsArr.map((alphabet) => {\n            return (\n              <tr key={alphabet}>\n                <td>\n                  <Button\n                    variant=\"warning\"\n                    onClick={(e) => startGame(e, alphabet)}\n                  >\n                    {alphabet}\n                  </Button>\n                </td>\n                <InputForm letter={alphabet} />\n              </tr>\n            );\n          })}\n        </tbody>\n      </Table>\n   </Row>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n//reportWebVitals();\n"],"sourceRoot":""}